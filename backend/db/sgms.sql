-- 表空间与用户的创建
CREATE TABLESPACE SGMS
    DATAFILE 'D:\ora\oradata\ORCL2\SGMS.dbf' SIZE 100M
AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;

CREATE USER c##sgms IDENTIFIED BY sgms;

ALTER USER c##sgms DEFAULT TABLESPACE SGMS;

GRANT UNLIMITED TABLESPACE TO c##sgms;
GRANT SELECT ANY TABLE TO c##sgms;
GRANT INSERT ANY TABLE TO c##sgms;
GRANT UPDATE ANY TABLE TO c##sgms;
GRANT DELETE ANY TABLE TO c##sgms;
GRANT CREATE SESSION, CREATE TABLE, CREATE SEQUENCE, CREATE VIEW, CREATE PROCEDURE, CREATE TYPE, CREATE TRIGGER TO c##sgms;

ALTER USER c##sgms ACCOUNT LOCK;
ALTER USER c##sgms ACCOUNT UNLOCK;

-- 表的创建
DROP TABLE stu_tb;
CREATE TABLE stu_tb (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
    name VARCHAR2 (100),
    campus_id VARCHAR2 (20),
    major VARCHAR2 (100),
    grade VARCHAR2 (4),
    CONSTRAINT pk_stu PRIMARY KEY (id)
);

DROP TABLE course_tb;
CREATE TABLE course_tb (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
    name VARCHAR2(100) NOT NULL,
    credit NUMBER(3,1),
    daily_ratio NUMBER(3,2) CHECK (daily_ratio >= 0 AND daily_ratio <= 1),
    CONSTRAINT pk_course PRIMARY KEY (id)
);
-- 课程名称索引
CREATE INDEX idx_course_name ON course_tb (name);

DROP TABLE class_tb;
CREATE TABLE class_tb (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
    name VARCHAR2(100) NOT NULL,
    capacity NUMBER CHECK (capacity > 0),
    CONSTRAINT pk_class PRIMARY KEY (id)
);
-- 班级名称索引
CREATE INDEX idx_class_name ON class_tb (name);

DROP TABLE stu_class_tb;
CREATE TABLE stu_class_tb (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
    stu_id NUMBER NOT NULL,
    class_id NUMBER NOT NULL,
    CONSTRAINT pk_stu_class PRIMARY KEY (id),
    CONSTRAINT fk_stu_id FOREIGN KEY (stu_id) REFERENCES stu_tb(id) ON DELETE CASCADE,
    CONSTRAINT fk_class_id FOREIGN KEY (class_id) REFERENCES class_tb(id) ON DELETE CASCADE
);

DROP TABLE cou_class_tb;
CREATE TABLE cou_class_tb (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
    class_id NUMBER NOT NULL,
    course_id NUMBER NOT NULL,
    CONSTRAINT pk_cou_class PRIMARY KEY (id),
    CONSTRAINT fk_cou_class_class_id FOREIGN KEY (class_id) REFERENCES class_tb(id) ON DELETE CASCADE,
    CONSTRAINT fk_cou_class_course_id FOREIGN KEY (course_id) REFERENCES course_tb(id) ON DELETE CASCADE
);

DROP TABLE stu_cou_score_tb;
CREATE TABLE stu_cou_score_tb (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
    stu_id NUMBER NOT NULL,
    course_id NUMBER NOT NULL,
    daily_score NUMBER CHECK (daily_score >= 0 AND daily_score <= 100),
    exam_score NUMBER CHECK (exam_score >= 0 AND exam_score <= 100),
    CONSTRAINT pk_stu_cou_score PRIMARY KEY (id),
    CONSTRAINT fk_stu_cou_score_stu_id FOREIGN KEY (stu_id) REFERENCES stu_tb(id) ON DELETE CASCADE,
    CONSTRAINT fk_stu_cou_score_course_id FOREIGN KEY (course_id) REFERENCES course_tb(id) ON DELETE CASCADE
);

-- 创建计算总成绩视图
CREATE OR REPLACE VIEW stu_cou_score_view AS
SELECT
    scs.stu_id,
    scs.course_id,
    scs.daily_score,
    c.daily_ratio,
    scs.exam_score,
    1 - c.daily_ratio AS exam_ratio,    -- 计算考试成绩占比
    scs.daily_score * c.daily_ratio + scs.exam_score * (1 - c.daily_ratio) AS final_score   -- 按照上述规则计算最终成绩
FROM stu_cou_score_tb scs
JOIN course_tb c ON scs.course_id = c.id;

-- 创建触发器，在向stu_class_tb表插入或更新数据前进行检查
CREATE OR REPLACE TRIGGER check_student_count
BEFORE INSERT OR UPDATE ON stu_class_tb
FOR EACH ROW
DECLARE
    current_count NUMBER;
    class_capacity NUMBER;
BEGIN
    -- 获取当前班级已有的学生数量
    SELECT COUNT(*) INTO current_count
    FROM stu_class_tb
    WHERE class_id = :NEW.class_id;

    -- 获取当前班级的容量限制
    SELECT capacity INTO class_capacity
    FROM class_tb
    WHERE id = :NEW.class_id;

    -- 如果插入或更新后学生数量超过容量限制，则抛出异常
    IF current_count + 1 > class_capacity THEN
            RAISE_APPLICATION_ERROR(-20001, '班级学生数量超过容量限制');
    END IF;
END;
/